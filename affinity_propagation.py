# -*- coding: utf-8 -*-
"""Affinity Propagation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t6Pjk_inioJSOX_j5xxFvS1UT7nBiZ2H
"""

from sklearn.datasets import fetch_20newsgroups
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import AffinityPropagation
from sklearn import metrics
import numpy as np

categories = ['talk.politics.misc', 'rec.autos', 'comp.sys.mac.hardware', 'sci.space']
newsgroups = fetch_20newsgroups(subset='all', categories=categories, remove=('headers', 'footers', 'quotes'))

vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(newsgroups.data)

model = AffinityPropagation(random_state=0)
model.fit(X)

labels = model.labels_
n_clusters = len(np.unique(labels))

print(f"Jumlah klaster yang ditemukan: {n_clusters}")
print("Homogeneity Score:", metrics.homogeneity_score(newsgroups.target, labels))
print("Completeness Score:", metrics.completeness_score(newsgroups.target, labels))
print("V-Measure:", metrics.v_measure_score(newsgroups.target, labels))

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import AffinityPropagation

X, y_true = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=42)

aff_model = AffinityPropagation(random_state=42)
aff_model.fit(X)
cluster_centers_indices = aff_model.cluster_centers_indices_
labels = aff_model.labels_
n_clusters = len(np.unique(labels))

plt.figure(figsize=(10, 7))
colors = plt.cm.rainbow(np.linspace(0, 1, n_clusters))

for k, col in zip(range(n_clusters), colors):
    class_members = labels == k
    cluster_center = X[cluster_centers_indices[k]]
    plt.plot(X[class_members, 0], X[class_members, 1], '.', markerfacecolor=col, markersize=8)
    plt.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col,
             markeredgecolor='k', markersize=14, label=f'Cluster {k} Center')

plt.title(f'Affinity Propagation Clustering\nTotal Clusters: {n_clusters}')
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()